def check(func):
    def wrapper(a, b):
        if b == 0:
            return "Denominator can't be zero"
        return func(a, b)
    return wrapper

@check
def div(a, b):
    return a / b

# Example usage:
print(div(6, 2))  # Output: 3
print(div(6, 0))  # Output: Denominator can't be zero


import os

FILE_NAME = "employees.txt"

def add_employee():
    with open(FILE_NAME, "a") as file:
        emp_id = input("Employee ID: ")
        name = input("Name: ")
        position = input("Position: ")
        salary = input("Salary: ")
        file.write(f"{emp_id}, {name}, {position}, {salary}\n")
        print("Employee added successfully.\n")

def view_employees():
    if not os.path.exists(FILE_NAME):
        print("No records found.\n")
        return
    with open(FILE_NAME, "r") as file:
        print(file.read())

def search_employee():
    emp_id = input("Enter Employee ID to search: ")
    found = False
    with open(FILE_NAME, "r") as file:
        for line in file:
            if line.startswith(emp_id + ","):
                print("Employee found:", line.strip())
                found = True
                break
    if not found:
        print("Employee not found.\n")

def update_employee():
    emp_id = input("Enter Employee ID to update: ")
    updated_lines = []
    found = False

    with open(FILE_NAME, "r") as file:
        lines = file.readlines()

    for line in lines:
        if line.startswith(emp_id + ","):
            name = input("New Name: ")
            position = input("New Position: ")
            salary = input("New Salary: ")
            updated_lines.append(f"{emp_id}, {name}, {position}, {salary}\n")
            found = True
        else:
            updated_lines.append(line)

    with open(FILE_NAME, "w") as file:
        file.writelines(updated_lines)

    print("Update successful.\n" if found else "Employee not found.\n")

def delete_employee():
    emp_id = input("Enter Employee ID to delete: ")
    new_lines = []
    found = False

    with open(FILE_NAME, "r") as file:
        for line in file:
            if not line.startswith(emp_id + ","):
                new_lines.append(line)
            else:
                found = True

    with open(FILE_NAME, "w") as file:
        file.writelines(new_lines)

    print("Employee deleted.\n" if found else "Employee not found.\n")

def main_menu():
    while True:
        print("\nEmployee Records Manager")
        print("1. Add new employee record")
        print("2. View all employee records")
        print("3. Search for an employee by ID")
        print("4. Update employee information")
        print("5. Delete an employee record")
        print("6. Exit")

        choice = input("Select an option: ")

        if choice == '1':
            add_employee()
        elif choice == '2':
            view_employees()
        elif choice == '3':
            search_employee()
        elif choice == '4':
            update_employee()
        elif choice == '5':
            delete_employee()
        elif choice == '6':
            print("Exiting...")
            break
        else:
            print("Invalid choice. Try again.")

# Uncomment to run:
# main_menu()

import os
import string
from collections import Counter

def create_sample_file():
    print("sample.txt not found. Please enter a paragraph:")
    text = input("> ")
    with open("sample.txt", "w") as f:
        f.write(text)

def clean_text(text):
    translator = str.maketrans('', '', string.punctuation)
    return text.translate(translator).lower()

def count_words(filename, top_n=5):
    if not os.path.exists(filename):
        create_sample_file()

    with open(filename, "r") as file:
        text = file.read()

    words = clean_text(text).split()
    total_words = len(words)
    word_counts = Counter(words)
    most_common = word_counts.most_common(top_n)

    print(f"\nTotal words: {total_words}")
    print("Top", top_n, "most common words:")
    for word, count in most_common:
        print(f"{word} - {count} times")

    with open("word_count_report.txt", "w") as report:
        report.write("Word Count Report\n")
        report.write(f"Total Words: {total_words}\n")
        report.write(f"Top {top_n} Words:\n")
        for word, count in most_common:
            report.write(f"{word} - {count}\n")

# Example usage:
# top_n = int(input("How many top common words to display? "))
# count_words("sample.txt", top_n)

