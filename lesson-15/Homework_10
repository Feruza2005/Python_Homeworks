# --- Task 1: Library Management System with Custom Exceptions ---

class BookNotFoundException(Exception):
    pass

class BookAlreadyBorrowedException(Exception):
    pass

class MemberLimitExceededException(Exception):
    pass

class Book:
    def __init__(self, title, author):
        self.title = title
        self.author = author
        self.is_borrowed = False

class Member:
    def __init__(self, name):
        self.name = name
        self.borrowed_books = []

    def borrow_book(self, book):
        if len(self.borrowed_books) >= 3:
            raise MemberLimitExceededException(f"{self.name} cannot borrow more than 3 books.")
        if book.is_borrowed:
            raise BookAlreadyBorrowedException(f"The book '{book.title}' is already borrowed.")
        book.is_borrowed = True
        self.borrowed_books.append(book)

    def return_book(self, book):
        if book in self.borrowed_books:
            book.is_borrowed = False
            self.borrowed_books.remove(book)

class Library:
    def __init__(self):
        self.books = []
        self.members = []

    def add_book(self, book):
        self.books.append(book)

    def add_member(self, member):
        self.members.append(member)

    def find_book(self, title):
        for book in self.books:
            if book.title == title:
                return book
        raise BookNotFoundException(f"Book '{title}' not found in the library.")

    def borrow_book(self, member_name, book_title):
        member = next((m for m in self.members if m.name == member_name), None)
        if member is None:
            print(f"Member '{member_name}' not found.")
            return
        book = self.find_book(book_title)
        member.borrow_book(book)
        print(f"{member.name} borrowed '{book.title}'.")

    def return_book(self, member_name, book_title):
        member = next((m for m in self.members if m.name == member_name), None)
        if member is None:
            print(f"Member '{member_name}' not found.")
            return
        book = self.find_book(book_title)
        member.return_book(book)
        print(f"{member.name} returned '{book.title}'.")

# --- Task 2: Student Grades Management ---
import csv
from collections import defaultdict

def calculate_average_grades(input_file, output_file):
    subject_grades = defaultdict(list)

    with open(input_file, newline='') as csvfile:
        reader = csv.DictReader(csvfile)
        for row in reader:
            subject_grades[row['Subject']].append(int(row['Grade']))

    with open(output_file, 'w', newline='') as csvfile:
        fieldnames = ['Subject', 'Average Grade']
        writer = csv.DictWriter(csvfile, fieldnames=fieldnames)
        writer.writeheader()

        for subject, grades in subject_grades.items():
            avg = sum(grades) / len(grades)
            writer.writerow({'Subject': subject, 'Average Grade': round(avg, 2)})

# --- Task 3: JSON Task Handling ---
import json

def load_tasks(filename):
    with open(filename, 'r') as file:
        return json.load(file)

def save_tasks(tasks, filename):
    with open(filename, 'w') as file:
        json.dump(tasks, file, indent=4)

def display_tasks(tasks):
    print("\n--- Task List ---")
    for task in tasks:
        print(f"ID: {task['id']}, Task: {task['task']}, Completed: {task['completed']}, Priority: {task['priority']}")

def calculate_task_stats(tasks):
    total = len(tasks)
    completed = sum(1 for t in tasks if t['completed'])
    pending = total - completed
    avg_priority = sum(t['priority'] for t in tasks) / total if total else 0

    print("\n--- Task Stats ---")
    print(f"Total tasks: {total}")
    print(f"Completed tasks: {completed}")
    print(f"Pending tasks: {pending}")
    print(f"Average priority: {avg_priority:.2f}")

def convert_tasks_to_csv(tasks, filename):
    with open(filename, 'w', newline='') as csvfile:
        fieldnames = ['ID', 'Task', 'Completed', 'Priority']
        writer = csv.DictWriter(csvfile, fieldnames=fieldnames)
        writer.writeheader()
        for task in tasks:
            writer.writerow({
                'ID': task['id'],
                'Task': task['task'],
                'Completed': task['completed'],
                'Priority': task['priority']
            })

# Sample execution:
if __name__ == "__main__":
    # Task 1: Library management test
    print("\n--- Library Test ---")
    lib = Library()
    book1 = Book("1984", "George Orwell")
    book2 = Book("To Kill a Mockingbird", "Harper Lee")
    member1 = Member("Alice")

    lib.add_book(book1)
    lib.add_book(book2)
    lib.add_member(member1)

    try:
        lib.borrow_book("Alice", "1984")
        lib.borrow_book("Alice", "1984")  # Should raise BookAlreadyBorrowedException
    except Exception as e:
        print(e)

    try:
        lib.borrow_book("Alice", "Invisible Man")  # Should raise BookNotFoundException
    except Exception as e:
        print(e)

    lib.return_book("Alice", "1984")

    # Task 2: Grade average calculation
    print("\n--- Grades Calculation ---")
    calculate_average_grades('grades.csv', 'average_grades.csv')
    print("Average grades saved to 'average_grades.csv'.")

    # Task 3: JSON Task handling
    print("\n--- JSON Tasks ---")
    tasks = load_tasks('tasks.json')
    display_tasks(tasks)
    calculate_task_stats(tasks)
    convert_tasks_to_csv(tasks, 'tasks.csv')
    print("Tasks converted to 'tasks.csv'.")
